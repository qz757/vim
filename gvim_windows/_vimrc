"--------------------------------------------------------------------------------
" 默认
"--------------------------------------------------------------------------------
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction
"--------------------------------------------------------------------------------
" 配置多语言环境,解决中文乱码问题
"--------------------------------------------------------------------------------
if has("multi_byte") 
    " UTF-8 编码 
    set encoding=utf-8 
    set termencoding=utf-8 
    set formatoptions+=mM 
    set fencs=utf-8,gbk 
    if v:lang =~? '^/(zh/)/|/(ja/)/|/(ko/)' 
        set ambiwidth=double 
    endif 
    if has("win32") 
        source $VIMRUNTIME/delmenu.vim 
        source $VIMRUNTIME/menu.vim 
        language messages zh_CN.utf-8 
    endif 
else 
    echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte" 
endif
"--------------------------------------------------------------------------------
" 配置VIM标准显示
"--------------------------------------------------------------------------------
set nu!
colorscheme desert 
syntax enable 
syntax on
"set lines=35 columns=118 "窗口大小
set hlsearch        " 高亮显示搜索结果
set incsearch       " 查询时非常方便，如要查找book单词，当输入到/b时，会自动找到
autocmd GUIEnter * simalt ~x "窗口最大
set cursorcolumn
set cursorline
set nobackup
"--------------------------------------------------------------------------------
" 编程相关的设置
"--------------------------------------------------------------------------------
"set completeopt=longest,menu    " 关掉智能补全时的预览窗口
"filetype pluginindenton       " 加了这句才可以用智能补全
set showmatch       " 设置匹配模式，类似当输入一个左括号时会匹配相应的那个右括号
set smartindent     " 智能对齐方式
set tabstop=4       "tab对应的长度
set softtabstop=4   "回退时退回的缩进长度
set shiftwidth=4    " 换行时行间交错使用4个空格
set expandtab       "缩进用空格表示
set noexpandtab     "缩进用制表符表示
set autoindent      " 自动对齐
set ai!             " 设置自动缩进
"自动补全括号
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {}<ESC>i
"--------------------------------------------------------------------------------
" vundle配置
"--------------------------------------------------------------------------------
filetype off  "vundle依赖filetype关闭
" 此处规定Vundle的路径  
set rtp+=$VIM/vimfiles/bundle/vundle/  
call vundle#rc('$VIM/vimfiles/bundle/')  
Bundle 'gmarik/vundle'  
filetype plugin indent on     " required! 
"--------------------------------------------------------------------------------
" 插件安装列表
"--------------------------------------------------------------------------------
Bundle 'scrooloose/nerdtree'
Bundle 'majutsushi/tagbar'
Bundle 'fholgado/minibufexpl.vim'
Bundle 'scrooloose/syntastic'
Bundle 'a.vim'
Bundle 'c.vim'
Bundle 'grep.vim'
Bundle 'shougo/neocomplete'
Bundle 'kien/ctrlp.vim'
Bundle 'SuperTab'
Bundle 'davidhalter/jedi-vim'
Bundle 'cscope.vim'
Bundle 'chazy/cscope_maps'
"--------------------------------------------------------------------------------
" ctags
"--------------------------------------------------------------------------------
set tags=tags; 
set autochdir
"--------------------------------------------------------------------------------
" NERDTree
"--------------------------------------------------------------------------------
"NERDTree快捷键
"nmap <F2> :NERDTreeToggle  <CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif
autocmd vimenter * NERDTree
" NERDTree.vim
let g:NERDTreeWinPos="right"
let g:NERDTreeWinSize=30
let g:NERDTreeShowLineNumbers=1
let g:neocomplcache_enable_at_startup = 1
"--------------------------------------------------------------------------------
" minibuf
"--------------------------------------------------------------------------------
let g:miniBufExplMapWindowNavVim = 1   
let g:miniBufExplMapWindowNavArrows = 1   
let g:miniBufExplMapCTabSwitchBufs = 1   
let g:miniBufExplModSelTarget = 1  
let g:miniBufExplMoreThanOne=0

nnoremap <C-N> :bn<CR>
nnoremap <C-P> :bp<CR>
nnoremap <C-D> :MBEbd<CR>
"--------------------------------------------------------------------------------
" tagbar
"--------------------------------------------------------------------------------
"nmap <Leader>tb :TagbarToggle<CR>        "快捷键设置
let g:tagbar_left = 1
let g:tagbar_ctags_bin='ctags.exe'            "ctags程序的路径
let g:tagbar_width=30                    "窗口宽度的设置
map <F3> :Tagbar<CR>
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx,*.py call tagbar#autoopen()     "如果是c语言的程序的话，tagbar自动开启
"--------------------------------------------------------------------------------
" grep
"--------------------------------------------------------------------------------
"grep
nnoremap <silent> <F4> :Grep<CR>
"--------------------------------------------------------------------------------
" a.vim
"--------------------------------------------------------------------------------
"a.vim H/C文件切换
nnoremap <silent> <F12> :A<CR> 
"--------------------------------------------------------------------------------
" syntastic
"--------------------------------------------------------------------------------
let g:syntastic_error_symbol='>>'
let g:syntastic_warning_symbol='>'
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=1
let g:syntastic_enable_highlighting=1
let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes,速度比pylint快
" 修改高亮的背景色, 适应主题
highlight SyntasticErrorSign guifg=white guibg=red

" to see error location list
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_loc_list_height = 5
function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <Leader>s :call ToggleErrors()<cr>
" nnoremap <Leader>sn :lnext<cr>
" nnoremap <Leader>sp :lprevious<cr>
"--------------------------------------------------------------------------------
" neocomplete
"--------------------------------------------------------------------------------

"--------------------------------------------------------------------------------
" jedi-vim
"--------------------------------------------------------------------------------
let g:jedi#use_tabs_not_buffers = 1
let g:jedi#use_splits_not_buffers = "bottom"
let g:jedi#show_call_signatures = "1"